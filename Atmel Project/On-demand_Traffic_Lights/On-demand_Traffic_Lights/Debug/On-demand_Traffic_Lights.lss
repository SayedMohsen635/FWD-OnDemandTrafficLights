
On-demand_Traffic_Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000fce  00001062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800072  00800072  00001074  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145c  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000782  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbf  00000000  00000000  00002e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051c  00000000  00000000  00003e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da1  00000000  00000000  00004384  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005125  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <main>
  8a:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <appInit>:
volatile unsigned short Flag;
volatile unsigned short Counter;

void appInit(void){
	// 1. Configure Cars' Leds
	LED_vInit('A' , 0);		// Green
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 4c 03 	call	0x698	; 0x698 <LED_vInit>
	LED_vInit('A' , 1);		// Yellow
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 4c 03 	call	0x698	; 0x698 <LED_vInit>
	LED_vInit('A' , 2);		// Red
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 4c 03 	call	0x698	; 0x698 <LED_vInit>
	
	// 2. Configure Pedestrians' Leds
	LED_vInit('B' , 0);		// Green
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 4c 03 	call	0x698	; 0x698 <LED_vInit>
	LED_vInit('B' , 1);		// Yellow
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 4c 03 	call	0x698	; 0x698 <LED_vInit>
	LED_vInit('B' , 2);		// Red
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 4c 03 	call	0x698	; 0x698 <LED_vInit>
	
	// 3. Initialize Timer 0 in Normal Mode
	timerInit();
  c2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <timerInit>
	
	// 4. Configure INT0 Interrupt
	MCUCR |= (1 << ISC00) | (1 << ISC01);		// Select the rising edge mode for INT0
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);						// Set the source of interrupt(Enable INT0)
  cc:	8b b7       	in	r24, 0x3b	; 59
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8b bf       	out	0x3b, r24	; 59
  d2:	08 95       	ret

000000d4 <appStart>:
}

void appStart(void){
	/* 1. Turn On Cars' Green Led For 5 Seconds */
	LED_vTurnOn('A' , 0);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	81 e4       	ldi	r24, 0x41	; 65
  d8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
	timerStartWithPrescaler();		// Start Timer With Prescaler 1024
  dc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
	while(Overflows < MAX_OVERFLOWS);
  e0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
  e4:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
  e8:	44 97       	sbiw	r24, 0x14	; 20
  ea:	d0 f3       	brcs	.-12     	; 0xe0 <appStart+0xc>
	Overflows = 0;
  ec:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
  f0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
	timerStop();					// Stop Timer
  f4:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
	if((Flag == 1) && (DIO_u8readPin('A' , 0) == 1)){
  f8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Flag>
  fc:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Flag+0x1>
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	09 f0       	breq	.+2      	; 0x106 <appStart+0x32>
 104:	b6 c0       	rjmp	.+364    	; 0x272 <appStart+0x19e>
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_u8readPin>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	09 f0       	breq	.+2      	; 0x114 <appStart+0x40>
 112:	af c0       	rjmp	.+350    	; 0x272 <appStart+0x19e>
		LED_vTurnOff('A' , 0);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 11c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS){
 120:	1c c0       	rjmp	.+56     	; 0x15a <appStart+0x86>
			LED_Toggle('A' , 1);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			LED_Toggle('B' , 1);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	82 e4       	ldi	r24, 0x42	; 66
 12e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			// Delay For Toggling
			while(Counter < 50){
 132:	09 c0       	rjmp	.+18     	; 0x146 <appStart+0x72>
				Counter++;
 134:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 138:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Counter+0x1>
 142:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Counter>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
			LED_Toggle('A' , 1);
			LED_Toggle('B' , 1);
			// Delay For Toggling
			while(Counter < 50){
 146:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 14a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 14e:	c2 97       	sbiw	r24, 0x32	; 50
 150:	88 f3       	brcs	.-30     	; 0x134 <appStart+0x60>
				Counter++;
			}
			Counter = 0;
 152:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 156:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
	Overflows = 0;
	timerStop();					// Stop Timer
	if((Flag == 1) && (DIO_u8readPin('A' , 0) == 1)){
		LED_vTurnOff('A' , 0);
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
 15a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 15e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 162:	44 97       	sbiw	r24, 0x14	; 20
 164:	f0 f2       	brcs	.-68     	; 0x122 <appStart+0x4e>
			while(Counter < 50){
				Counter++;
			}
			Counter = 0;
		}
		Counter = 0;
 166:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 16a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
 16e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 172:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 176:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 1);
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	81 e4       	ldi	r24, 0x41	; 65
 17e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 1);
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	82 e4       	ldi	r24, 0x42	; 66
 186:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOn('A' , 2);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	81 e4       	ldi	r24, 0x41	; 65
 18e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		LED_vTurnOn('B' , 0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 19a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS);
 19e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 1a2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 1a6:	44 97       	sbiw	r24, 0x14	; 20
 1a8:	d0 f3       	brcs	.-12     	; 0x19e <appStart+0xca>
		Overflows = 0;
 1aa:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 1ae:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 1b2:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 2);
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	82 e4       	ldi	r24, 0x42	; 66
 1c2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 1c6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS){
 1ca:	1c c0       	rjmp	.+56     	; 0x204 <appStart+0x130>
			LED_Toggle('A' , 1);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			LED_Toggle('B' , 1);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			// Delay For Toggling
			while(Counter < 50){
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <appStart+0x11c>
				Counter++;
 1de:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 1e2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Counter+0x1>
 1ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Counter>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
			LED_Toggle('A' , 1);
			LED_Toggle('B' , 1);
			// Delay For Toggling
			while(Counter < 50){
 1f0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 1f4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 1f8:	c2 97       	sbiw	r24, 0x32	; 50
 1fa:	88 f3       	brcs	.-30     	; 0x1de <appStart+0x10a>
				Counter++;
			}
			Counter = 0;
 1fc:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 200:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
		timerStop();					// Stop Timer
		LED_vTurnOff('A' , 2);
		LED_vTurnOff('B' , 0);
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
 204:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 208:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 20c:	44 97       	sbiw	r24, 0x14	; 20
 20e:	f0 f2       	brcs	.-68     	; 0x1cc <appStart+0xf8>
			while(Counter < 50){
				Counter++;
			}
			Counter = 0;
		}
		Counter = 0;
 210:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 214:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
 218:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 21c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 220:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 1);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	81 e4       	ldi	r24, 0x41	; 65
 228:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 1);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	82 e4       	ldi	r24, 0x42	; 66
 230:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOn('A' , 0);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		LED_vTurnOn('B' , 2);
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 244:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS);
 248:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 24c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 250:	44 97       	sbiw	r24, 0x14	; 20
 252:	d0 f3       	brcs	.-12     	; 0x248 <appStart+0x174>
		Overflows = 0;
 254:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 258:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 25c:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 0);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	81 e4       	ldi	r24, 0x41	; 65
 264:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 2);
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	82 e4       	ldi	r24, 0x42	; 66
 26c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
 270:	04 c0       	rjmp	.+8      	; 0x27a <appStart+0x1a6>
	}else{
		/* Turn Off Cars' Green Led for 5 Seconds */
		LED_vTurnOff('A' , 0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	81 e4       	ldi	r24, 0x41	; 65
 276:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
	}
	/* To Prevent Interrupt From Being Executed Again */
	Flag = 0;
 27a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Flag+0x1>
 27e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Flag>
	/* 2. Blink Cars' Yellow Led for 5 Seconds */
	timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 282:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
	while(Overflows < MAX_OVERFLOWS){
 286:	18 c0       	rjmp	.+48     	; 0x2b8 <appStart+0x1e4>
		LED_Toggle('A' , 1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
		// Delay For Toggling
		while(Counter < 50){
 290:	09 c0       	rjmp	.+18     	; 0x2a4 <appStart+0x1d0>
			Counter++;
 292:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 296:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Counter+0x1>
 2a0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Counter>
	/* 2. Blink Cars' Yellow Led for 5 Seconds */
	timerStartWithPrescaler();		// Start Timer With Prescaler 1024
	while(Overflows < MAX_OVERFLOWS){
		LED_Toggle('A' , 1);
		// Delay For Toggling
		while(Counter < 50){
 2a4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 2a8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 2ac:	c2 97       	sbiw	r24, 0x32	; 50
 2ae:	88 f3       	brcs	.-30     	; 0x292 <appStart+0x1be>
			Counter++;
		}
		Counter = 0;
 2b0:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 2b4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
	}
	/* To Prevent Interrupt From Being Executed Again */
	Flag = 0;
	/* 2. Blink Cars' Yellow Led for 5 Seconds */
	timerStartWithPrescaler();		// Start Timer With Prescaler 1024
	while(Overflows < MAX_OVERFLOWS){
 2b8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2bc:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 2c0:	44 97       	sbiw	r24, 0x14	; 20
 2c2:	10 f3       	brcs	.-60     	; 0x288 <appStart+0x1b4>
		while(Counter < 50){
			Counter++;
		}
		Counter = 0;
	}
	Counter = 0;
 2c4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 2c8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
	Overflows = 0;
 2cc:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 2d0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
	timerStop();					// Stop Timer
 2d4:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
	LED_vTurnOff('A' , 1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	81 e4       	ldi	r24, 0x41	; 65
 2dc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
	if(Flag == 1){
 2e0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Flag>
 2e4:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Flag+0x1>
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	09 f0       	breq	.+2      	; 0x2ee <appStart+0x21a>
 2ec:	de c0       	rjmp	.+444    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 2ee:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS){
 2f2:	1c c0       	rjmp	.+56     	; 0x32c <appStart+0x258>
			LED_Toggle('A' , 1);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	81 e4       	ldi	r24, 0x41	; 65
 2f8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			LED_Toggle('B' , 1);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	82 e4       	ldi	r24, 0x42	; 66
 300:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			// Delay For Toggling
			while(Counter < 50){
 304:	09 c0       	rjmp	.+18     	; 0x318 <appStart+0x244>
				Counter++;
 306:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 30a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Counter+0x1>
 314:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Counter>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
			LED_Toggle('A' , 1);
			LED_Toggle('B' , 1);
			// Delay For Toggling
			while(Counter < 50){
 318:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 31c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 320:	c2 97       	sbiw	r24, 0x32	; 50
 322:	88 f3       	brcs	.-30     	; 0x306 <appStart+0x232>
				Counter++;
			}
			Counter = 0;
 324:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 328:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
	Overflows = 0;
	timerStop();					// Stop Timer
	LED_vTurnOff('A' , 1);
	if(Flag == 1){
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
 32c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 330:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 334:	44 97       	sbiw	r24, 0x14	; 20
 336:	f0 f2       	brcs	.-68     	; 0x2f4 <appStart+0x220>
			while(Counter < 50){
				Counter++;
			}
			Counter = 0;
		}
		Counter = 0;
 338:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 33c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
 340:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 344:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 348:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 1);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	81 e4       	ldi	r24, 0x41	; 65
 350:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 1);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	82 e4       	ldi	r24, 0x42	; 66
 358:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOn('A' , 2);
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	81 e4       	ldi	r24, 0x41	; 65
 360:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		LED_vTurnOn('B' , 0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	82 e4       	ldi	r24, 0x42	; 66
 368:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 36c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS);
 370:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 374:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 378:	44 97       	sbiw	r24, 0x14	; 20
 37a:	d0 f3       	brcs	.-12     	; 0x370 <appStart+0x29c>
		Overflows = 0;
 37c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 380:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 384:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 2);
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	81 e4       	ldi	r24, 0x41	; 65
 38c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 0);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	82 e4       	ldi	r24, 0x42	; 66
 394:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 398:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS){
 39c:	1c c0       	rjmp	.+56     	; 0x3d6 <appStart+0x302>
			LED_Toggle('A' , 1);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	81 e4       	ldi	r24, 0x41	; 65
 3a2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			LED_Toggle('B' , 1);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	82 e4       	ldi	r24, 0x42	; 66
 3aa:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			// Delay For Toggling
			while(Counter < 50){
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <appStart+0x2ee>
				Counter++;
 3b0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 3b4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Counter+0x1>
 3be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Counter>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
			LED_Toggle('A' , 1);
			LED_Toggle('B' , 1);
			// Delay For Toggling
			while(Counter < 50){
 3c2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 3c6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 3ca:	c2 97       	sbiw	r24, 0x32	; 50
 3cc:	88 f3       	brcs	.-30     	; 0x3b0 <appStart+0x2dc>
				Counter++;
			}
			Counter = 0;
 3ce:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 3d2:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
		timerStop();					// Stop Timer
		LED_vTurnOff('A' , 2);
		LED_vTurnOff('B' , 0);
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
 3d6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 3da:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 3de:	44 97       	sbiw	r24, 0x14	; 20
 3e0:	f0 f2       	brcs	.-68     	; 0x39e <appStart+0x2ca>
			while(Counter < 50){
				Counter++;
			}
			Counter = 0;
		}
		Counter = 0;
 3e2:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 3e6:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
 3ea:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 3ee:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 3f2:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 1);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	81 e4       	ldi	r24, 0x41	; 65
 3fa:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 1);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	82 e4       	ldi	r24, 0x42	; 66
 402:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOn('A' , 0);
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	81 e4       	ldi	r24, 0x41	; 65
 40a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		LED_vTurnOn('B' , 2);
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	82 e4       	ldi	r24, 0x42	; 66
 412:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 416:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS);
 41a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 41e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 422:	44 97       	sbiw	r24, 0x14	; 20
 424:	d0 f3       	brcs	.-12     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		Overflows = 0;
 426:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 42a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 42e:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 0);
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	81 e4       	ldi	r24, 0x41	; 65
 436:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 2);
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	82 e4       	ldi	r24, 0x42	; 66
 43e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 442:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS){
 446:	18 c0       	rjmp	.+48     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
			LED_Toggle('A' , 1);
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	81 e4       	ldi	r24, 0x41	; 65
 44c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			// Delay For Toggling
			while(Counter < 50){
 450:	09 c0       	rjmp	.+18     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				Counter++;
 452:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 456:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Counter+0x1>
 460:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Counter>
		LED_vTurnOff('B' , 2);
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
			LED_Toggle('A' , 1);
			// Delay For Toggling
			while(Counter < 50){
 464:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 468:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 46c:	c2 97       	sbiw	r24, 0x32	; 50
 46e:	88 f3       	brcs	.-30     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
				Counter++;
			}
			Counter = 0;
 470:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 474:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
		timerStop();					// Stop Timer
		LED_vTurnOff('A' , 0);
		LED_vTurnOff('B' , 2);
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
 478:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 47c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 480:	44 97       	sbiw	r24, 0x14	; 20
 482:	10 f3       	brcs	.-60     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			while(Counter < 50){
				Counter++;
			}
			Counter = 0;
		}
		Counter = 0;
 484:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 488:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
 48c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 490:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 494:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 1);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	81 e4       	ldi	r24, 0x41	; 65
 49c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOn('A' , 2);
 4a0:	62 e0       	ldi	r22, 0x02	; 2
 4a2:	81 e4       	ldi	r24, 0x41	; 65
 4a4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
	}else{
		/* 3. Turn On Cars' Red Led for 5 Seconds */
		LED_vTurnOn('A' , 2);
 4aa:	62 e0       	ldi	r22, 0x02	; 2
 4ac:	81 e4       	ldi	r24, 0x41	; 65
 4ae:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
	}
	/* To Prevent Interrupt From Being Executed Again */
	Flag = 0;
 4b2:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Flag+0x1>
 4b6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Flag>
	timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 4ba:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
	while(Overflows < MAX_OVERFLOWS);
 4be:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 4c2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 4c6:	44 97       	sbiw	r24, 0x14	; 20
 4c8:	d0 f3       	brcs	.-12     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
	Overflows = 0;
 4ca:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 4ce:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
	timerStop();					// Stop Timer
 4d2:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
	/* 4. Turn Off Cars' Red Led and Blink Cars' Yellow Led for 5 Seconds */
	if((Flag == 1) && (DIO_u8readPin('A' , 2) == 1)){
 4d6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Flag>
 4da:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Flag+0x1>
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e2:	77 c0       	rjmp	.+238    	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 4e4:	62 e0       	ldi	r22, 0x02	; 2
 4e6:	81 e4       	ldi	r24, 0x41	; 65
 4e8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_u8readPin>
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4f0:	70 c0       	rjmp	.+224    	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
		LED_vTurnOn('B' , 0);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	82 e4       	ldi	r24, 0x42	; 66
 4f6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 4fa:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS);
 4fe:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 502:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 506:	44 97       	sbiw	r24, 0x14	; 20
 508:	d0 f3       	brcs	.-12     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
		Overflows = 0;
 50a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 50e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 512:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 2);
 516:	62 e0       	ldi	r22, 0x02	; 2
 518:	81 e4       	ldi	r24, 0x41	; 65
 51a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 0);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	82 e4       	ldi	r24, 0x42	; 66
 522:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 526:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS){
 52a:	1c c0       	rjmp	.+56     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
			LED_Toggle('A' , 1);
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	81 e4       	ldi	r24, 0x41	; 65
 530:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			LED_Toggle('B' , 1);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	82 e4       	ldi	r24, 0x42	; 66
 538:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			// Delay For Toggling
			while(Counter < 50){
 53c:	09 c0       	rjmp	.+18     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
				Counter++;
 53e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 542:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Counter+0x1>
 54c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Counter>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
			LED_Toggle('A' , 1);
			LED_Toggle('B' , 1);
			// Delay For Toggling
			while(Counter < 50){
 550:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 554:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 558:	c2 97       	sbiw	r24, 0x32	; 50
 55a:	88 f3       	brcs	.-30     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
				Counter++;
			}
			Counter = 0;
 55c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 560:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
		timerStop();					// Stop Timer
		LED_vTurnOff('A' , 2);
		LED_vTurnOff('B' , 0);
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
 564:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 568:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 56c:	44 97       	sbiw	r24, 0x14	; 20
 56e:	f0 f2       	brcs	.-68     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
			while(Counter < 50){
				Counter++;
			}
			Counter = 0;
		}
		Counter = 0;
 570:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 574:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
 578:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 57c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 580:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 1);
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	81 e4       	ldi	r24, 0x41	; 65
 588:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 1);
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	82 e4       	ldi	r24, 0x42	; 66
 590:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOn('A' , 0);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	81 e4       	ldi	r24, 0x41	; 65
 598:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		LED_vTurnOn('B' , 2);
 59c:	62 e0       	ldi	r22, 0x02	; 2
 59e:	82 e4       	ldi	r24, 0x42	; 66
 5a0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_vTurnOn>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 5a4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS);
 5a8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 5ac:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 5b0:	44 97       	sbiw	r24, 0x14	; 20
 5b2:	d0 f3       	brcs	.-12     	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
		Overflows = 0;
 5b4:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 5b8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 5bc:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 0);
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	81 e4       	ldi	r24, 0x41	; 65
 5c4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		LED_vTurnOff('B' , 2);
 5c8:	62 e0       	ldi	r22, 0x02	; 2
 5ca:	82 e4       	ldi	r24, 0x42	; 66
 5cc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
 5d0:	33 c0       	rjmp	.+102    	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
	}else{
		LED_vTurnOff('A' , 2);
 5d2:	62 e0       	ldi	r22, 0x02	; 2
 5d4:	81 e4       	ldi	r24, 0x41	; 65
 5d6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
 5da:	0e 94 fe 04 	call	0x9fc	; 0x9fc <timerStartWithPrescaler>
		while(Overflows < MAX_OVERFLOWS){
 5de:	18 c0       	rjmp	.+48     	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
			LED_Toggle('A' , 1);
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	81 e4       	ldi	r24, 0x41	; 65
 5e4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LED_Toggle>
			// Delay For Toggling
			while(Counter < 50){
 5e8:	09 c0       	rjmp	.+18     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
				Counter++;
 5ea:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 5ee:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Counter+0x1>
 5f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Counter>
		LED_vTurnOff('A' , 2);
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
			LED_Toggle('A' , 1);
			// Delay For Toggling
			while(Counter < 50){
 5fc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Counter>
 600:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Counter+0x1>
 604:	c2 97       	sbiw	r24, 0x32	; 50
 606:	88 f3       	brcs	.-30     	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
				Counter++;
			}
			Counter = 0;
 608:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 60c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		LED_vTurnOff('A' , 0);
		LED_vTurnOff('B' , 2);
	}else{
		LED_vTurnOff('A' , 2);
		timerStartWithPrescaler();		// Start Timer With Prescaler 1024
		while(Overflows < MAX_OVERFLOWS){
 610:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 614:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 618:	44 97       	sbiw	r24, 0x14	; 20
 61a:	10 f3       	brcs	.-60     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
			while(Counter < 50){
				Counter++;
			}
			Counter = 0;
		}
		Counter = 0;
 61c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Counter+0x1>
 620:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Counter>
		Overflows = 0;
 624:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 628:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		timerStop();					// Stop Timer
 62c:	0e 94 05 05 	call	0xa0a	; 0xa0a <timerStop>
		LED_vTurnOff('A' , 1);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	81 e4       	ldi	r24, 0x41	; 65
 634:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_vTurnOff>
	}
	Flag = 0;
 638:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Flag+0x1>
 63c:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Flag>
 640:	08 95       	ret

00000642 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
	Overflows++;
 650:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 654:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
 65e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
}
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	0f 90       	pop	r0
 668:	0f be       	out	0x3f, r0	; 63
 66a:	0f 90       	pop	r0
 66c:	1f 90       	pop	r1
 66e:	18 95       	reti

00000670 <__vector_1>:

ISR(EXT_INT_0){
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
	Flag = 1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <Flag+0x1>
 686:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Flag>
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <LED_vInit>:

#include "Led.h"

/* This method is used to set the pin connected to the led as an output */
void LED_vInit(uint8_t portName , uint8_t pinNumber){
	DIO_vSetPinDir(portName , pinNumber , 1);
 698:	41 e0       	ldi	r20, 0x01	; 1
 69a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <DIO_vSetPinDir>
 69e:	08 95       	ret

000006a0 <LED_vTurnOn>:
}

/* This method is used to turn on the led */
void LED_vTurnOn(uint8_t portName , uint8_t pinNumber){
	DIO_writePin(portName , pinNumber , 1);
 6a0:	41 e0       	ldi	r20, 0x01	; 1
 6a2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_writePin>
 6a6:	08 95       	ret

000006a8 <LED_vTurnOff>:
}

/* This method is used to turn off the led */
void LED_vTurnOff(uint8_t portName , uint8_t pinNumber){
	DIO_writePin(portName , pinNumber , 0);
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_writePin>
 6ae:	08 95       	ret

000006b0 <LED_Toggle>:
}

/* This method is used to turn off the led */
void LED_Toggle(uint8_t portName , uint8_t pinNumber){
	DIO_togPin(portName , pinNumber);
 6b0:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_togPin>
 6b4:	08 95       	ret

000006b6 <main>:
 */ 

#include "Application/App.h"

int main(void){
	appInit();
 6b6:	0e 94 49 00 	call	0x92	; 0x92 <appInit>
	while (1) {
		appStart();
 6ba:	0e 94 6a 00 	call	0xd4	; 0xd4 <appStart>
 6be:	fd cf       	rjmp	.-6      	; 0x6ba <main+0x4>

000006c0 <DIO_vSetPinDir>:

#include "DIO.h"

/* This method is used to set the direction of the pin in a particular register */
void DIO_vSetPinDir(uint8_t portName , uint8_t pinNumber , uint8_t Dir){		// 'v' refers to return type void
	switch(portName){
 6c0:	82 34       	cpi	r24, 0x42	; 66
 6c2:	19 f1       	breq	.+70     	; 0x70a <DIO_vSetPinDir+0x4a>
 6c4:	18 f4       	brcc	.+6      	; 0x6cc <DIO_vSetPinDir+0xc>
 6c6:	81 34       	cpi	r24, 0x41	; 65
 6c8:	39 f0       	breq	.+14     	; 0x6d8 <DIO_vSetPinDir+0x18>
 6ca:	6a c0       	rjmp	.+212    	; 0x7a0 <DIO_vSetPinDir+0xe0>
 6cc:	83 34       	cpi	r24, 0x43	; 67
 6ce:	b1 f1       	breq	.+108    	; 0x73c <DIO_vSetPinDir+0x7c>
 6d0:	84 34       	cpi	r24, 0x44	; 68
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <DIO_vSetPinDir+0x16>
 6d4:	4c c0       	rjmp	.+152    	; 0x76e <DIO_vSetPinDir+0xae>
 6d6:	64 c0       	rjmp	.+200    	; 0x7a0 <DIO_vSetPinDir+0xe0>
		case 'A':
			if(Dir == 1){
 6d8:	41 30       	cpi	r20, 0x01	; 1
 6da:	59 f4       	brne	.+22     	; 0x6f2 <DIO_vSetPinDir+0x32>
				SET_BIT(DDRA , pinNumber);
 6dc:	2a b3       	in	r18, 0x1a	; 26
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_vSetPinDir+0x28>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_vSetPinDir+0x24>
 6ec:	82 2b       	or	r24, r18
 6ee:	8a bb       	out	0x1a, r24	; 26
 6f0:	08 95       	ret
			}else{
				CLR_BIT(DDRA , pinNumber);
 6f2:	2a b3       	in	r18, 0x1a	; 26
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_vSetPinDir+0x3e>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	6a 95       	dec	r22
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_vSetPinDir+0x3a>
 702:	80 95       	com	r24
 704:	82 23       	and	r24, r18
 706:	8a bb       	out	0x1a, r24	; 26
 708:	08 95       	ret
			}
			break;
		case 'B':
			if(Dir == 1){
 70a:	41 30       	cpi	r20, 0x01	; 1
 70c:	59 f4       	brne	.+22     	; 0x724 <DIO_vSetPinDir+0x64>
				SET_BIT(DDRB , pinNumber);
 70e:	27 b3       	in	r18, 0x17	; 23
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_vSetPinDir+0x5a>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_vSetPinDir+0x56>
 71e:	82 2b       	or	r24, r18
 720:	87 bb       	out	0x17, r24	; 23
 722:	08 95       	ret
			}else{
				CLR_BIT(DDRB , pinNumber);
 724:	27 b3       	in	r18, 0x17	; 23
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_vSetPinDir+0x70>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	6a 95       	dec	r22
 732:	e2 f7       	brpl	.-8      	; 0x72c <DIO_vSetPinDir+0x6c>
 734:	80 95       	com	r24
 736:	82 23       	and	r24, r18
 738:	87 bb       	out	0x17, r24	; 23
 73a:	08 95       	ret
			}
			break;
		case 'C':
			if(Dir == 1){
 73c:	41 30       	cpi	r20, 0x01	; 1
 73e:	59 f4       	brne	.+22     	; 0x756 <DIO_vSetPinDir+0x96>
				SET_BIT(DDRC , pinNumber);
 740:	24 b3       	in	r18, 0x14	; 20
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_vSetPinDir+0x8c>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	6a 95       	dec	r22
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_vSetPinDir+0x88>
 750:	82 2b       	or	r24, r18
 752:	84 bb       	out	0x14, r24	; 20
 754:	08 95       	ret
			}else{
				CLR_BIT(DDRC , pinNumber);
 756:	24 b3       	in	r18, 0x14	; 20
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_vSetPinDir+0xa2>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	6a 95       	dec	r22
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_vSetPinDir+0x9e>
 766:	80 95       	com	r24
 768:	82 23       	and	r24, r18
 76a:	84 bb       	out	0x14, r24	; 20
 76c:	08 95       	ret
			}
			break;
		case 'D':
			if(Dir == 1){
 76e:	41 30       	cpi	r20, 0x01	; 1
 770:	59 f4       	brne	.+22     	; 0x788 <DIO_vSetPinDir+0xc8>
				SET_BIT(DDRD , pinNumber);
 772:	21 b3       	in	r18, 0x11	; 17
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_vSetPinDir+0xbe>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	6a 95       	dec	r22
 780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_vSetPinDir+0xba>
 782:	82 2b       	or	r24, r18
 784:	81 bb       	out	0x11, r24	; 17
 786:	08 95       	ret
			}else{
				CLR_BIT(DDRD , pinNumber);
 788:	21 b3       	in	r18, 0x11	; 17
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_vSetPinDir+0xd4>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	6a 95       	dec	r22
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_vSetPinDir+0xd0>
 798:	80 95       	com	r24
 79a:	82 23       	and	r24, r18
 79c:	81 bb       	out	0x11, r24	; 17
 79e:	08 95       	ret
			}
			break;
		default:
			printf("Invalid Port Name");
 7a0:	80 e6       	ldi	r24, 0x60	; 96
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	9f 93       	push	r25
 7a6:	8f 93       	push	r24
 7a8:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
			break;
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	08 95       	ret

000007b2 <DIO_writePin>:
	}
}

/* This method is used to write a value to a pin in a particular register */
void DIO_writePin(uint8_t portName , uint8_t pinNumber , uint8_t value){
	switch(portName){
 7b2:	82 34       	cpi	r24, 0x42	; 66
 7b4:	19 f1       	breq	.+70     	; 0x7fc <DIO_writePin+0x4a>
 7b6:	18 f4       	brcc	.+6      	; 0x7be <DIO_writePin+0xc>
 7b8:	81 34       	cpi	r24, 0x41	; 65
 7ba:	39 f0       	breq	.+14     	; 0x7ca <DIO_writePin+0x18>
 7bc:	6a c0       	rjmp	.+212    	; 0x892 <__stack+0x33>
 7be:	83 34       	cpi	r24, 0x43	; 67
 7c0:	b1 f1       	breq	.+108    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7c2:	84 34       	cpi	r24, 0x44	; 68
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <DIO_writePin+0x16>
 7c6:	4c c0       	rjmp	.+152    	; 0x860 <__stack+0x1>
 7c8:	64 c0       	rjmp	.+200    	; 0x892 <__stack+0x33>
		case 'A':
			if(value == 1){
 7ca:	41 30       	cpi	r20, 0x01	; 1
 7cc:	59 f4       	brne	.+22     	; 0x7e4 <DIO_writePin+0x32>
				SET_BIT(PORTA , pinNumber);
 7ce:	2b b3       	in	r18, 0x1b	; 27
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_writePin+0x28>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	6a 95       	dec	r22
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_writePin+0x24>
 7de:	82 2b       	or	r24, r18
 7e0:	8b bb       	out	0x1b, r24	; 27
 7e2:	08 95       	ret
			}else{
				CLR_BIT(PORTA , pinNumber);
 7e4:	2b b3       	in	r18, 0x1b	; 27
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_writePin+0x3e>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	6a 95       	dec	r22
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_writePin+0x3a>
 7f4:	80 95       	com	r24
 7f6:	82 23       	and	r24, r18
 7f8:	8b bb       	out	0x1b, r24	; 27
 7fa:	08 95       	ret
			}
			break;
		case 'B':
			if(value == 1){
 7fc:	41 30       	cpi	r20, 0x01	; 1
 7fe:	59 f4       	brne	.+22     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
				SET_BIT(PORTB , pinNumber);
 800:	28 b3       	in	r18, 0x18	; 24
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	6a 95       	dec	r22
 80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	82 2b       	or	r24, r18
 812:	88 bb       	out	0x18, r24	; 24
 814:	08 95       	ret
			}else{
				CLR_BIT(PORTB , pinNumber);
 816:	28 b3       	in	r18, 0x18	; 24
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	6a 95       	dec	r22
 824:	e2 f7       	brpl	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 826:	80 95       	com	r24
 828:	82 23       	and	r24, r18
 82a:	88 bb       	out	0x18, r24	; 24
 82c:	08 95       	ret
			}
			break;
		case 'C':
			if(value == 1){
 82e:	41 30       	cpi	r20, 0x01	; 1
 830:	59 f4       	brne	.+22     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
				SET_BIT(PORTC , pinNumber);
 832:	25 b3       	in	r18, 0x15	; 21
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	6a 95       	dec	r22
 840:	e2 f7       	brpl	.-8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 842:	82 2b       	or	r24, r18
 844:	85 bb       	out	0x15, r24	; 21
 846:	08 95       	ret
			}else{
				CLR_BIT(PORTC , pinNumber);
 848:	25 b3       	in	r18, 0x15	; 21
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	6a 95       	dec	r22
 856:	e2 f7       	brpl	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 858:	80 95       	com	r24
 85a:	82 23       	and	r24, r18
 85c:	85 bb       	out	0x15, r24	; 21
 85e:	08 95       	ret
			}
			break;
		case 'D':
			if(value == 1){
 860:	41 30       	cpi	r20, 0x01	; 1
 862:	59 f4       	brne	.+22     	; 0x87a <__stack+0x1b>
				SET_BIT(PORTD , pinNumber);
 864:	22 b3       	in	r18, 0x12	; 18
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	88 0f       	add	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	6a 95       	dec	r22
 872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
 874:	82 2b       	or	r24, r18
 876:	82 bb       	out	0x12, r24	; 18
 878:	08 95       	ret
			}else{
				CLR_BIT(PORTD , pinNumber);
 87a:	22 b3       	in	r18, 0x12	; 18
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	6a 95       	dec	r22
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	80 95       	com	r24
 88c:	82 23       	and	r24, r18
 88e:	82 bb       	out	0x12, r24	; 18
 890:	08 95       	ret
			}
			break;
		default:
			printf("Invalid Port Name");
 892:	80 e6       	ldi	r24, 0x60	; 96
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	9f 93       	push	r25
 898:	8f 93       	push	r24
 89a:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
			break;
 89e:	0f 90       	pop	r0
 8a0:	0f 90       	pop	r0
 8a2:	08 95       	ret

000008a4 <DIO_u8readPin>:
}

/* This method is used to read a value of a pin from a particular register */
uint8_t DIO_u8readPin(uint8_t portName , uint8_t pinNumber){		// u8 refers to return type uint8_t (8 bit)
	uint8_t result = 0;
	switch(portName){
 8a4:	82 34       	cpi	r24, 0x42	; 66
 8a6:	e9 f0       	breq	.+58     	; 0x8e2 <DIO_u8readPin+0x3e>
 8a8:	18 f4       	brcc	.+6      	; 0x8b0 <DIO_u8readPin+0xc>
 8aa:	81 34       	cpi	r24, 0x41	; 65
 8ac:	31 f0       	breq	.+12     	; 0x8ba <DIO_u8readPin+0x16>
 8ae:	55 c0       	rjmp	.+170    	; 0x95a <DIO_u8readPin+0xb6>
 8b0:	83 34       	cpi	r24, 0x43	; 67
 8b2:	59 f1       	breq	.+86     	; 0x90a <DIO_u8readPin+0x66>
 8b4:	84 34       	cpi	r24, 0x44	; 68
 8b6:	e9 f1       	breq	.+122    	; 0x932 <DIO_u8readPin+0x8e>
 8b8:	50 c0       	rjmp	.+160    	; 0x95a <DIO_u8readPin+0xb6>
		case 'A':
			result = READ_BIT(PINA , pinNumber);
 8ba:	49 b3       	in	r20, 0x19	; 25
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	9c 01       	movw	r18, r24
 8c2:	06 2e       	mov	r0, r22
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <DIO_u8readPin+0x26>
 8c6:	22 0f       	add	r18, r18
 8c8:	33 1f       	adc	r19, r19
 8ca:	0a 94       	dec	r0
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <DIO_u8readPin+0x22>
 8ce:	84 2f       	mov	r24, r20
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	82 23       	and	r24, r18
 8d4:	93 23       	and	r25, r19
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <DIO_u8readPin+0x38>
 8d8:	95 95       	asr	r25
 8da:	87 95       	ror	r24
 8dc:	6a 95       	dec	r22
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <DIO_u8readPin+0x34>
			break;
 8e0:	08 95       	ret
		case 'B':
			result = READ_BIT(PINB , pinNumber);
 8e2:	46 b3       	in	r20, 0x16	; 22
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	9c 01       	movw	r18, r24
 8ea:	06 2e       	mov	r0, r22
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <DIO_u8readPin+0x4e>
 8ee:	22 0f       	add	r18, r18
 8f0:	33 1f       	adc	r19, r19
 8f2:	0a 94       	dec	r0
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <DIO_u8readPin+0x4a>
 8f6:	84 2f       	mov	r24, r20
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	82 23       	and	r24, r18
 8fc:	93 23       	and	r25, r19
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <DIO_u8readPin+0x60>
 900:	95 95       	asr	r25
 902:	87 95       	ror	r24
 904:	6a 95       	dec	r22
 906:	e2 f7       	brpl	.-8      	; 0x900 <DIO_u8readPin+0x5c>
			break;
 908:	08 95       	ret
		case 'C':
			result = READ_BIT(PINC , pinNumber);
 90a:	43 b3       	in	r20, 0x13	; 19
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	9c 01       	movw	r18, r24
 912:	06 2e       	mov	r0, r22
 914:	02 c0       	rjmp	.+4      	; 0x91a <DIO_u8readPin+0x76>
 916:	22 0f       	add	r18, r18
 918:	33 1f       	adc	r19, r19
 91a:	0a 94       	dec	r0
 91c:	e2 f7       	brpl	.-8      	; 0x916 <DIO_u8readPin+0x72>
 91e:	84 2f       	mov	r24, r20
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	82 23       	and	r24, r18
 924:	93 23       	and	r25, r19
 926:	02 c0       	rjmp	.+4      	; 0x92c <DIO_u8readPin+0x88>
 928:	95 95       	asr	r25
 92a:	87 95       	ror	r24
 92c:	6a 95       	dec	r22
 92e:	e2 f7       	brpl	.-8      	; 0x928 <DIO_u8readPin+0x84>
			break;
 930:	08 95       	ret
		case 'D':
			result = READ_BIT(PIND , pinNumber);
 932:	40 b3       	in	r20, 0x10	; 16
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	9c 01       	movw	r18, r24
 93a:	06 2e       	mov	r0, r22
 93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_u8readPin+0x9e>
 93e:	22 0f       	add	r18, r18
 940:	33 1f       	adc	r19, r19
 942:	0a 94       	dec	r0
 944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_u8readPin+0x9a>
 946:	84 2f       	mov	r24, r20
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	82 23       	and	r24, r18
 94c:	93 23       	and	r25, r19
 94e:	02 c0       	rjmp	.+4      	; 0x954 <DIO_u8readPin+0xb0>
 950:	95 95       	asr	r25
 952:	87 95       	ror	r24
 954:	6a 95       	dec	r22
 956:	e2 f7       	brpl	.-8      	; 0x950 <DIO_u8readPin+0xac>
			break;
 958:	08 95       	ret
		default:
			printf("Invalid Port Name");
 95a:	80 e6       	ldi	r24, 0x60	; 96
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	9f 93       	push	r25
 960:	8f 93       	push	r24
 962:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
			break;
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
	}
}

/* This method is used to read a value of a pin from a particular register */
uint8_t DIO_u8readPin(uint8_t portName , uint8_t pinNumber){		// u8 refers to return type uint8_t (8 bit)
	uint8_t result = 0;
 96a:	80 e0       	ldi	r24, 0x00	; 0
		default:
			printf("Invalid Port Name");
			break;
	}
	return result;
}
 96c:	08 95       	ret

0000096e <DIO_togPin>:

/* This method is used to toggle a pin in a particular register */
void DIO_togPin(uint8_t portName , uint8_t pinNumber){
	switch(portName){
 96e:	82 34       	cpi	r24, 0x42	; 66
 970:	a1 f0       	breq	.+40     	; 0x99a <DIO_togPin+0x2c>
 972:	18 f4       	brcc	.+6      	; 0x97a <DIO_togPin+0xc>
 974:	81 34       	cpi	r24, 0x41	; 65
 976:	31 f0       	breq	.+12     	; 0x984 <DIO_togPin+0x16>
 978:	31 c0       	rjmp	.+98     	; 0x9dc <DIO_togPin+0x6e>
 97a:	83 34       	cpi	r24, 0x43	; 67
 97c:	c9 f0       	breq	.+50     	; 0x9b0 <DIO_togPin+0x42>
 97e:	84 34       	cpi	r24, 0x44	; 68
 980:	11 f1       	breq	.+68     	; 0x9c6 <DIO_togPin+0x58>
 982:	2c c0       	rjmp	.+88     	; 0x9dc <DIO_togPin+0x6e>
		case 'A':
			TOG_BIT(PORTA , pinNumber);
 984:	2b b3       	in	r18, 0x1b	; 27
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <DIO_togPin+0x22>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	6a 95       	dec	r22
 992:	e2 f7       	brpl	.-8      	; 0x98c <DIO_togPin+0x1e>
 994:	82 27       	eor	r24, r18
 996:	8b bb       	out	0x1b, r24	; 27
			break;
 998:	08 95       	ret
		case 'B':
			TOG_BIT(PORTB , pinNumber);
 99a:	28 b3       	in	r18, 0x18	; 24
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <DIO_togPin+0x38>
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	6a 95       	dec	r22
 9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <DIO_togPin+0x34>
 9aa:	82 27       	eor	r24, r18
 9ac:	88 bb       	out	0x18, r24	; 24
			break;
 9ae:	08 95       	ret
		case 'C':
			TOG_BIT(PORTC , pinNumber);
 9b0:	25 b3       	in	r18, 0x15	; 21
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <DIO_togPin+0x4e>
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	6a 95       	dec	r22
 9be:	e2 f7       	brpl	.-8      	; 0x9b8 <DIO_togPin+0x4a>
 9c0:	82 27       	eor	r24, r18
 9c2:	85 bb       	out	0x15, r24	; 21
			break;
 9c4:	08 95       	ret
		case 'D':
			TOG_BIT(PORTD , pinNumber);
 9c6:	22 b3       	in	r18, 0x12	; 18
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_togPin+0x64>
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	6a 95       	dec	r22
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_togPin+0x60>
 9d6:	82 27       	eor	r24, r18
 9d8:	82 bb       	out	0x12, r24	; 18
			break;
 9da:	08 95       	ret
		default:
			printf("Invalid Port Name");
 9dc:	80 e6       	ldi	r24, 0x60	; 96
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	9f 93       	push	r25
 9e2:	8f 93       	push	r24
 9e4:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
			break;
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	08 95       	ret

000009ee <timerInit>:
	SET_BIT(TCCR0 , CS02);
}

void getTimerStatus(void){
	// Get Timer Flag
	READ_BIT(TIFR , TOV0);
 9ee:	13 be       	out	0x33, r1	; 51
 9f0:	12 be       	out	0x32, r1	; 50
 9f2:	78 94       	sei
 9f4:	89 b7       	in	r24, 0x39	; 57
 9f6:	81 60       	ori	r24, 0x01	; 1
 9f8:	89 bf       	out	0x39, r24	; 57
 9fa:	08 95       	ret

000009fc <timerStartWithPrescaler>:
 9fc:	83 b7       	in	r24, 0x33	; 51
 9fe:	81 60       	ori	r24, 0x01	; 1
 a00:	83 bf       	out	0x33, r24	; 51
 a02:	83 b7       	in	r24, 0x33	; 51
 a04:	84 60       	ori	r24, 0x04	; 4
 a06:	83 bf       	out	0x33, r24	; 51
 a08:	08 95       	ret

00000a0a <timerStop>:
}

void timerStop(void){
	// Stop Timer
	TCCR0 = 0x00;
 a0a:	13 be       	out	0x33, r1	; 51
 a0c:	08 95       	ret

00000a0e <printf>:
 a0e:	a0 e0       	ldi	r26, 0x00	; 0
 a10:	b0 e0       	ldi	r27, 0x00	; 0
 a12:	ed e0       	ldi	r30, 0x0D	; 13
 a14:	f5 e0       	ldi	r31, 0x05	; 5
 a16:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__prologue_saves__+0x20>
 a1a:	ae 01       	movw	r20, r28
 a1c:	4b 5f       	subi	r20, 0xFB	; 251
 a1e:	5f 4f       	sbci	r21, 0xFF	; 255
 a20:	fa 01       	movw	r30, r20
 a22:	61 91       	ld	r22, Z+
 a24:	71 91       	ld	r23, Z+
 a26:	af 01       	movw	r20, r30
 a28:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__iob+0x2>
 a2c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__iob+0x3>
 a30:	0e 94 1d 05 	call	0xa3a	; 0xa3a <vfprintf>
 a34:	e2 e0       	ldi	r30, 0x02	; 2
 a36:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__epilogue_restores__+0x20>

00000a3a <vfprintf>:
 a3a:	ab e0       	ldi	r26, 0x0B	; 11
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	e3 e2       	ldi	r30, 0x23	; 35
 a40:	f5 e0       	ldi	r31, 0x05	; 5
 a42:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__prologue_saves__>
 a46:	6c 01       	movw	r12, r24
 a48:	7b 01       	movw	r14, r22
 a4a:	8a 01       	movw	r16, r20
 a4c:	fc 01       	movw	r30, r24
 a4e:	17 82       	std	Z+7, r1	; 0x07
 a50:	16 82       	std	Z+6, r1	; 0x06
 a52:	83 81       	ldd	r24, Z+3	; 0x03
 a54:	81 ff       	sbrs	r24, 1
 a56:	cc c1       	rjmp	.+920    	; 0xdf0 <vfprintf+0x3b6>
 a58:	ce 01       	movw	r24, r28
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	3c 01       	movw	r6, r24
 a5e:	f6 01       	movw	r30, r12
 a60:	93 81       	ldd	r25, Z+3	; 0x03
 a62:	f7 01       	movw	r30, r14
 a64:	93 fd       	sbrc	r25, 3
 a66:	85 91       	lpm	r24, Z+
 a68:	93 ff       	sbrs	r25, 3
 a6a:	81 91       	ld	r24, Z+
 a6c:	7f 01       	movw	r14, r30
 a6e:	88 23       	and	r24, r24
 a70:	09 f4       	brne	.+2      	; 0xa74 <vfprintf+0x3a>
 a72:	ba c1       	rjmp	.+884    	; 0xde8 <vfprintf+0x3ae>
 a74:	85 32       	cpi	r24, 0x25	; 37
 a76:	39 f4       	brne	.+14     	; 0xa86 <vfprintf+0x4c>
 a78:	93 fd       	sbrc	r25, 3
 a7a:	85 91       	lpm	r24, Z+
 a7c:	93 ff       	sbrs	r25, 3
 a7e:	81 91       	ld	r24, Z+
 a80:	7f 01       	movw	r14, r30
 a82:	85 32       	cpi	r24, 0x25	; 37
 a84:	29 f4       	brne	.+10     	; 0xa90 <vfprintf+0x56>
 a86:	b6 01       	movw	r22, r12
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 a8e:	e7 cf       	rjmp	.-50     	; 0xa5e <vfprintf+0x24>
 a90:	91 2c       	mov	r9, r1
 a92:	21 2c       	mov	r2, r1
 a94:	31 2c       	mov	r3, r1
 a96:	ff e1       	ldi	r31, 0x1F	; 31
 a98:	f3 15       	cp	r31, r3
 a9a:	d8 f0       	brcs	.+54     	; 0xad2 <vfprintf+0x98>
 a9c:	8b 32       	cpi	r24, 0x2B	; 43
 a9e:	79 f0       	breq	.+30     	; 0xabe <vfprintf+0x84>
 aa0:	38 f4       	brcc	.+14     	; 0xab0 <vfprintf+0x76>
 aa2:	80 32       	cpi	r24, 0x20	; 32
 aa4:	79 f0       	breq	.+30     	; 0xac4 <vfprintf+0x8a>
 aa6:	83 32       	cpi	r24, 0x23	; 35
 aa8:	a1 f4       	brne	.+40     	; 0xad2 <vfprintf+0x98>
 aaa:	23 2d       	mov	r18, r3
 aac:	20 61       	ori	r18, 0x10	; 16
 aae:	1d c0       	rjmp	.+58     	; 0xaea <vfprintf+0xb0>
 ab0:	8d 32       	cpi	r24, 0x2D	; 45
 ab2:	61 f0       	breq	.+24     	; 0xacc <vfprintf+0x92>
 ab4:	80 33       	cpi	r24, 0x30	; 48
 ab6:	69 f4       	brne	.+26     	; 0xad2 <vfprintf+0x98>
 ab8:	23 2d       	mov	r18, r3
 aba:	21 60       	ori	r18, 0x01	; 1
 abc:	16 c0       	rjmp	.+44     	; 0xaea <vfprintf+0xb0>
 abe:	83 2d       	mov	r24, r3
 ac0:	82 60       	ori	r24, 0x02	; 2
 ac2:	38 2e       	mov	r3, r24
 ac4:	e3 2d       	mov	r30, r3
 ac6:	e4 60       	ori	r30, 0x04	; 4
 ac8:	3e 2e       	mov	r3, r30
 aca:	2a c0       	rjmp	.+84     	; 0xb20 <vfprintf+0xe6>
 acc:	f3 2d       	mov	r31, r3
 ace:	f8 60       	ori	r31, 0x08	; 8
 ad0:	1d c0       	rjmp	.+58     	; 0xb0c <vfprintf+0xd2>
 ad2:	37 fc       	sbrc	r3, 7
 ad4:	2d c0       	rjmp	.+90     	; 0xb30 <vfprintf+0xf6>
 ad6:	20 ed       	ldi	r18, 0xD0	; 208
 ad8:	28 0f       	add	r18, r24
 ada:	2a 30       	cpi	r18, 0x0A	; 10
 adc:	40 f0       	brcs	.+16     	; 0xaee <vfprintf+0xb4>
 ade:	8e 32       	cpi	r24, 0x2E	; 46
 ae0:	b9 f4       	brne	.+46     	; 0xb10 <vfprintf+0xd6>
 ae2:	36 fc       	sbrc	r3, 6
 ae4:	81 c1       	rjmp	.+770    	; 0xde8 <vfprintf+0x3ae>
 ae6:	23 2d       	mov	r18, r3
 ae8:	20 64       	ori	r18, 0x40	; 64
 aea:	32 2e       	mov	r3, r18
 aec:	19 c0       	rjmp	.+50     	; 0xb20 <vfprintf+0xe6>
 aee:	36 fe       	sbrs	r3, 6
 af0:	06 c0       	rjmp	.+12     	; 0xafe <vfprintf+0xc4>
 af2:	8a e0       	ldi	r24, 0x0A	; 10
 af4:	98 9e       	mul	r9, r24
 af6:	20 0d       	add	r18, r0
 af8:	11 24       	eor	r1, r1
 afa:	92 2e       	mov	r9, r18
 afc:	11 c0       	rjmp	.+34     	; 0xb20 <vfprintf+0xe6>
 afe:	ea e0       	ldi	r30, 0x0A	; 10
 b00:	2e 9e       	mul	r2, r30
 b02:	20 0d       	add	r18, r0
 b04:	11 24       	eor	r1, r1
 b06:	22 2e       	mov	r2, r18
 b08:	f3 2d       	mov	r31, r3
 b0a:	f0 62       	ori	r31, 0x20	; 32
 b0c:	3f 2e       	mov	r3, r31
 b0e:	08 c0       	rjmp	.+16     	; 0xb20 <vfprintf+0xe6>
 b10:	8c 36       	cpi	r24, 0x6C	; 108
 b12:	21 f4       	brne	.+8      	; 0xb1c <vfprintf+0xe2>
 b14:	83 2d       	mov	r24, r3
 b16:	80 68       	ori	r24, 0x80	; 128
 b18:	38 2e       	mov	r3, r24
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0xe6>
 b1c:	88 36       	cpi	r24, 0x68	; 104
 b1e:	41 f4       	brne	.+16     	; 0xb30 <vfprintf+0xf6>
 b20:	f7 01       	movw	r30, r14
 b22:	93 fd       	sbrc	r25, 3
 b24:	85 91       	lpm	r24, Z+
 b26:	93 ff       	sbrs	r25, 3
 b28:	81 91       	ld	r24, Z+
 b2a:	7f 01       	movw	r14, r30
 b2c:	81 11       	cpse	r24, r1
 b2e:	b3 cf       	rjmp	.-154    	; 0xa96 <vfprintf+0x5c>
 b30:	98 2f       	mov	r25, r24
 b32:	9f 7d       	andi	r25, 0xDF	; 223
 b34:	95 54       	subi	r25, 0x45	; 69
 b36:	93 30       	cpi	r25, 0x03	; 3
 b38:	28 f4       	brcc	.+10     	; 0xb44 <vfprintf+0x10a>
 b3a:	0c 5f       	subi	r16, 0xFC	; 252
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	9f e3       	ldi	r25, 0x3F	; 63
 b40:	99 83       	std	Y+1, r25	; 0x01
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x124>
 b44:	83 36       	cpi	r24, 0x63	; 99
 b46:	31 f0       	breq	.+12     	; 0xb54 <vfprintf+0x11a>
 b48:	83 37       	cpi	r24, 0x73	; 115
 b4a:	71 f0       	breq	.+28     	; 0xb68 <vfprintf+0x12e>
 b4c:	83 35       	cpi	r24, 0x53	; 83
 b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0x118>
 b50:	59 c0       	rjmp	.+178    	; 0xc04 <vfprintf+0x1ca>
 b52:	21 c0       	rjmp	.+66     	; 0xb96 <vfprintf+0x15c>
 b54:	f8 01       	movw	r30, r16
 b56:	80 81       	ld	r24, Z
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	0e 5f       	subi	r16, 0xFE	; 254
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	88 24       	eor	r8, r8
 b60:	83 94       	inc	r8
 b62:	91 2c       	mov	r9, r1
 b64:	53 01       	movw	r10, r6
 b66:	13 c0       	rjmp	.+38     	; 0xb8e <vfprintf+0x154>
 b68:	28 01       	movw	r4, r16
 b6a:	f2 e0       	ldi	r31, 0x02	; 2
 b6c:	4f 0e       	add	r4, r31
 b6e:	51 1c       	adc	r5, r1
 b70:	f8 01       	movw	r30, r16
 b72:	a0 80       	ld	r10, Z
 b74:	b1 80       	ldd	r11, Z+1	; 0x01
 b76:	36 fe       	sbrs	r3, 6
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x146>
 b7a:	69 2d       	mov	r22, r9
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x14a>
 b80:	6f ef       	ldi	r22, 0xFF	; 255
 b82:	7f ef       	ldi	r23, 0xFF	; 255
 b84:	c5 01       	movw	r24, r10
 b86:	0e 94 09 07 	call	0xe12	; 0xe12 <strnlen>
 b8a:	4c 01       	movw	r8, r24
 b8c:	82 01       	movw	r16, r4
 b8e:	f3 2d       	mov	r31, r3
 b90:	ff 77       	andi	r31, 0x7F	; 127
 b92:	3f 2e       	mov	r3, r31
 b94:	16 c0       	rjmp	.+44     	; 0xbc2 <vfprintf+0x188>
 b96:	28 01       	movw	r4, r16
 b98:	22 e0       	ldi	r18, 0x02	; 2
 b9a:	42 0e       	add	r4, r18
 b9c:	51 1c       	adc	r5, r1
 b9e:	f8 01       	movw	r30, r16
 ba0:	a0 80       	ld	r10, Z
 ba2:	b1 80       	ldd	r11, Z+1	; 0x01
 ba4:	36 fe       	sbrs	r3, 6
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <vfprintf+0x174>
 ba8:	69 2d       	mov	r22, r9
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <vfprintf+0x178>
 bae:	6f ef       	ldi	r22, 0xFF	; 255
 bb0:	7f ef       	ldi	r23, 0xFF	; 255
 bb2:	c5 01       	movw	r24, r10
 bb4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <strnlen_P>
 bb8:	4c 01       	movw	r8, r24
 bba:	f3 2d       	mov	r31, r3
 bbc:	f0 68       	ori	r31, 0x80	; 128
 bbe:	3f 2e       	mov	r3, r31
 bc0:	82 01       	movw	r16, r4
 bc2:	33 fc       	sbrc	r3, 3
 bc4:	1b c0       	rjmp	.+54     	; 0xbfc <vfprintf+0x1c2>
 bc6:	82 2d       	mov	r24, r2
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	88 16       	cp	r8, r24
 bcc:	99 06       	cpc	r9, r25
 bce:	b0 f4       	brcc	.+44     	; 0xbfc <vfprintf+0x1c2>
 bd0:	b6 01       	movw	r22, r12
 bd2:	80 e2       	ldi	r24, 0x20	; 32
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 bda:	2a 94       	dec	r2
 bdc:	f4 cf       	rjmp	.-24     	; 0xbc6 <vfprintf+0x18c>
 bde:	f5 01       	movw	r30, r10
 be0:	37 fc       	sbrc	r3, 7
 be2:	85 91       	lpm	r24, Z+
 be4:	37 fe       	sbrs	r3, 7
 be6:	81 91       	ld	r24, Z+
 be8:	5f 01       	movw	r10, r30
 bea:	b6 01       	movw	r22, r12
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 bf2:	21 10       	cpse	r2, r1
 bf4:	2a 94       	dec	r2
 bf6:	21 e0       	ldi	r18, 0x01	; 1
 bf8:	82 1a       	sub	r8, r18
 bfa:	91 08       	sbc	r9, r1
 bfc:	81 14       	cp	r8, r1
 bfe:	91 04       	cpc	r9, r1
 c00:	71 f7       	brne	.-36     	; 0xbde <vfprintf+0x1a4>
 c02:	e8 c0       	rjmp	.+464    	; 0xdd4 <vfprintf+0x39a>
 c04:	84 36       	cpi	r24, 0x64	; 100
 c06:	11 f0       	breq	.+4      	; 0xc0c <vfprintf+0x1d2>
 c08:	89 36       	cpi	r24, 0x69	; 105
 c0a:	41 f5       	brne	.+80     	; 0xc5c <vfprintf+0x222>
 c0c:	f8 01       	movw	r30, r16
 c0e:	37 fe       	sbrs	r3, 7
 c10:	07 c0       	rjmp	.+14     	; 0xc20 <vfprintf+0x1e6>
 c12:	60 81       	ld	r22, Z
 c14:	71 81       	ldd	r23, Z+1	; 0x01
 c16:	82 81       	ldd	r24, Z+2	; 0x02
 c18:	93 81       	ldd	r25, Z+3	; 0x03
 c1a:	0c 5f       	subi	r16, 0xFC	; 252
 c1c:	1f 4f       	sbci	r17, 0xFF	; 255
 c1e:	08 c0       	rjmp	.+16     	; 0xc30 <vfprintf+0x1f6>
 c20:	60 81       	ld	r22, Z
 c22:	71 81       	ldd	r23, Z+1	; 0x01
 c24:	07 2e       	mov	r0, r23
 c26:	00 0c       	add	r0, r0
 c28:	88 0b       	sbc	r24, r24
 c2a:	99 0b       	sbc	r25, r25
 c2c:	0e 5f       	subi	r16, 0xFE	; 254
 c2e:	1f 4f       	sbci	r17, 0xFF	; 255
 c30:	f3 2d       	mov	r31, r3
 c32:	ff 76       	andi	r31, 0x6F	; 111
 c34:	3f 2e       	mov	r3, r31
 c36:	97 ff       	sbrs	r25, 7
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <vfprintf+0x212>
 c3a:	90 95       	com	r25
 c3c:	80 95       	com	r24
 c3e:	70 95       	com	r23
 c40:	61 95       	neg	r22
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	f0 68       	ori	r31, 0x80	; 128
 c4a:	3f 2e       	mov	r3, r31
 c4c:	2a e0       	ldi	r18, 0x0A	; 10
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	a3 01       	movw	r20, r6
 c52:	0e 94 50 07 	call	0xea0	; 0xea0 <__ultoa_invert>
 c56:	88 2e       	mov	r8, r24
 c58:	86 18       	sub	r8, r6
 c5a:	45 c0       	rjmp	.+138    	; 0xce6 <vfprintf+0x2ac>
 c5c:	85 37       	cpi	r24, 0x75	; 117
 c5e:	31 f4       	brne	.+12     	; 0xc6c <vfprintf+0x232>
 c60:	23 2d       	mov	r18, r3
 c62:	2f 7e       	andi	r18, 0xEF	; 239
 c64:	b2 2e       	mov	r11, r18
 c66:	2a e0       	ldi	r18, 0x0A	; 10
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	25 c0       	rjmp	.+74     	; 0xcb6 <vfprintf+0x27c>
 c6c:	93 2d       	mov	r25, r3
 c6e:	99 7f       	andi	r25, 0xF9	; 249
 c70:	b9 2e       	mov	r11, r25
 c72:	8f 36       	cpi	r24, 0x6F	; 111
 c74:	c1 f0       	breq	.+48     	; 0xca6 <vfprintf+0x26c>
 c76:	18 f4       	brcc	.+6      	; 0xc7e <vfprintf+0x244>
 c78:	88 35       	cpi	r24, 0x58	; 88
 c7a:	79 f0       	breq	.+30     	; 0xc9a <vfprintf+0x260>
 c7c:	b5 c0       	rjmp	.+362    	; 0xde8 <vfprintf+0x3ae>
 c7e:	80 37       	cpi	r24, 0x70	; 112
 c80:	19 f0       	breq	.+6      	; 0xc88 <vfprintf+0x24e>
 c82:	88 37       	cpi	r24, 0x78	; 120
 c84:	21 f0       	breq	.+8      	; 0xc8e <vfprintf+0x254>
 c86:	b0 c0       	rjmp	.+352    	; 0xde8 <vfprintf+0x3ae>
 c88:	e9 2f       	mov	r30, r25
 c8a:	e0 61       	ori	r30, 0x10	; 16
 c8c:	be 2e       	mov	r11, r30
 c8e:	b4 fe       	sbrs	r11, 4
 c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x272>
 c92:	fb 2d       	mov	r31, r11
 c94:	f4 60       	ori	r31, 0x04	; 4
 c96:	bf 2e       	mov	r11, r31
 c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x272>
 c9a:	34 fe       	sbrs	r3, 4
 c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <vfprintf+0x278>
 c9e:	29 2f       	mov	r18, r25
 ca0:	26 60       	ori	r18, 0x06	; 6
 ca2:	b2 2e       	mov	r11, r18
 ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x278>
 ca6:	28 e0       	ldi	r18, 0x08	; 8
 ca8:	30 e0       	ldi	r19, 0x00	; 0
 caa:	05 c0       	rjmp	.+10     	; 0xcb6 <vfprintf+0x27c>
 cac:	20 e1       	ldi	r18, 0x10	; 16
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x27c>
 cb2:	20 e1       	ldi	r18, 0x10	; 16
 cb4:	32 e0       	ldi	r19, 0x02	; 2
 cb6:	f8 01       	movw	r30, r16
 cb8:	b7 fe       	sbrs	r11, 7
 cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x290>
 cbc:	60 81       	ld	r22, Z
 cbe:	71 81       	ldd	r23, Z+1	; 0x01
 cc0:	82 81       	ldd	r24, Z+2	; 0x02
 cc2:	93 81       	ldd	r25, Z+3	; 0x03
 cc4:	0c 5f       	subi	r16, 0xFC	; 252
 cc6:	1f 4f       	sbci	r17, 0xFF	; 255
 cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x29c>
 cca:	60 81       	ld	r22, Z
 ccc:	71 81       	ldd	r23, Z+1	; 0x01
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 5f       	subi	r16, 0xFE	; 254
 cd4:	1f 4f       	sbci	r17, 0xFF	; 255
 cd6:	a3 01       	movw	r20, r6
 cd8:	0e 94 50 07 	call	0xea0	; 0xea0 <__ultoa_invert>
 cdc:	88 2e       	mov	r8, r24
 cde:	86 18       	sub	r8, r6
 ce0:	fb 2d       	mov	r31, r11
 ce2:	ff 77       	andi	r31, 0x7F	; 127
 ce4:	3f 2e       	mov	r3, r31
 ce6:	36 fe       	sbrs	r3, 6
 ce8:	0d c0       	rjmp	.+26     	; 0xd04 <vfprintf+0x2ca>
 cea:	23 2d       	mov	r18, r3
 cec:	2e 7f       	andi	r18, 0xFE	; 254
 cee:	a2 2e       	mov	r10, r18
 cf0:	89 14       	cp	r8, r9
 cf2:	58 f4       	brcc	.+22     	; 0xd0a <vfprintf+0x2d0>
 cf4:	34 fe       	sbrs	r3, 4
 cf6:	0b c0       	rjmp	.+22     	; 0xd0e <vfprintf+0x2d4>
 cf8:	32 fc       	sbrc	r3, 2
 cfa:	09 c0       	rjmp	.+18     	; 0xd0e <vfprintf+0x2d4>
 cfc:	83 2d       	mov	r24, r3
 cfe:	8e 7e       	andi	r24, 0xEE	; 238
 d00:	a8 2e       	mov	r10, r24
 d02:	05 c0       	rjmp	.+10     	; 0xd0e <vfprintf+0x2d4>
 d04:	b8 2c       	mov	r11, r8
 d06:	a3 2c       	mov	r10, r3
 d08:	03 c0       	rjmp	.+6      	; 0xd10 <vfprintf+0x2d6>
 d0a:	b8 2c       	mov	r11, r8
 d0c:	01 c0       	rjmp	.+2      	; 0xd10 <vfprintf+0x2d6>
 d0e:	b9 2c       	mov	r11, r9
 d10:	a4 fe       	sbrs	r10, 4
 d12:	0f c0       	rjmp	.+30     	; 0xd32 <vfprintf+0x2f8>
 d14:	fe 01       	movw	r30, r28
 d16:	e8 0d       	add	r30, r8
 d18:	f1 1d       	adc	r31, r1
 d1a:	80 81       	ld	r24, Z
 d1c:	80 33       	cpi	r24, 0x30	; 48
 d1e:	21 f4       	brne	.+8      	; 0xd28 <vfprintf+0x2ee>
 d20:	9a 2d       	mov	r25, r10
 d22:	99 7e       	andi	r25, 0xE9	; 233
 d24:	a9 2e       	mov	r10, r25
 d26:	09 c0       	rjmp	.+18     	; 0xd3a <vfprintf+0x300>
 d28:	a2 fe       	sbrs	r10, 2
 d2a:	06 c0       	rjmp	.+12     	; 0xd38 <vfprintf+0x2fe>
 d2c:	b3 94       	inc	r11
 d2e:	b3 94       	inc	r11
 d30:	04 c0       	rjmp	.+8      	; 0xd3a <vfprintf+0x300>
 d32:	8a 2d       	mov	r24, r10
 d34:	86 78       	andi	r24, 0x86	; 134
 d36:	09 f0       	breq	.+2      	; 0xd3a <vfprintf+0x300>
 d38:	b3 94       	inc	r11
 d3a:	a3 fc       	sbrc	r10, 3
 d3c:	11 c0       	rjmp	.+34     	; 0xd60 <vfprintf+0x326>
 d3e:	a0 fe       	sbrs	r10, 0
 d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0x314>
 d42:	b2 14       	cp	r11, r2
 d44:	88 f4       	brcc	.+34     	; 0xd68 <vfprintf+0x32e>
 d46:	28 0c       	add	r2, r8
 d48:	92 2c       	mov	r9, r2
 d4a:	9b 18       	sub	r9, r11
 d4c:	0e c0       	rjmp	.+28     	; 0xd6a <vfprintf+0x330>
 d4e:	b2 14       	cp	r11, r2
 d50:	60 f4       	brcc	.+24     	; 0xd6a <vfprintf+0x330>
 d52:	b6 01       	movw	r22, r12
 d54:	80 e2       	ldi	r24, 0x20	; 32
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 d5c:	b3 94       	inc	r11
 d5e:	f7 cf       	rjmp	.-18     	; 0xd4e <vfprintf+0x314>
 d60:	b2 14       	cp	r11, r2
 d62:	18 f4       	brcc	.+6      	; 0xd6a <vfprintf+0x330>
 d64:	2b 18       	sub	r2, r11
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x332>
 d68:	98 2c       	mov	r9, r8
 d6a:	21 2c       	mov	r2, r1
 d6c:	a4 fe       	sbrs	r10, 4
 d6e:	10 c0       	rjmp	.+32     	; 0xd90 <vfprintf+0x356>
 d70:	b6 01       	movw	r22, r12
 d72:	80 e3       	ldi	r24, 0x30	; 48
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 d7a:	a2 fe       	sbrs	r10, 2
 d7c:	17 c0       	rjmp	.+46     	; 0xdac <vfprintf+0x372>
 d7e:	a1 fc       	sbrc	r10, 1
 d80:	03 c0       	rjmp	.+6      	; 0xd88 <vfprintf+0x34e>
 d82:	88 e7       	ldi	r24, 0x78	; 120
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	02 c0       	rjmp	.+4      	; 0xd8c <vfprintf+0x352>
 d88:	88 e5       	ldi	r24, 0x58	; 88
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	b6 01       	movw	r22, r12
 d8e:	0c c0       	rjmp	.+24     	; 0xda8 <vfprintf+0x36e>
 d90:	8a 2d       	mov	r24, r10
 d92:	86 78       	andi	r24, 0x86	; 134
 d94:	59 f0       	breq	.+22     	; 0xdac <vfprintf+0x372>
 d96:	a1 fe       	sbrs	r10, 1
 d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x364>
 d9a:	8b e2       	ldi	r24, 0x2B	; 43
 d9c:	01 c0       	rjmp	.+2      	; 0xda0 <vfprintf+0x366>
 d9e:	80 e2       	ldi	r24, 0x20	; 32
 da0:	a7 fc       	sbrc	r10, 7
 da2:	8d e2       	ldi	r24, 0x2D	; 45
 da4:	b6 01       	movw	r22, r12
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dac:	89 14       	cp	r8, r9
 dae:	38 f4       	brcc	.+14     	; 0xdbe <vfprintf+0x384>
 db0:	b6 01       	movw	r22, r12
 db2:	80 e3       	ldi	r24, 0x30	; 48
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dba:	9a 94       	dec	r9
 dbc:	f7 cf       	rjmp	.-18     	; 0xdac <vfprintf+0x372>
 dbe:	8a 94       	dec	r8
 dc0:	f3 01       	movw	r30, r6
 dc2:	e8 0d       	add	r30, r8
 dc4:	f1 1d       	adc	r31, r1
 dc6:	80 81       	ld	r24, Z
 dc8:	b6 01       	movw	r22, r12
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dd0:	81 10       	cpse	r8, r1
 dd2:	f5 cf       	rjmp	.-22     	; 0xdbe <vfprintf+0x384>
 dd4:	22 20       	and	r2, r2
 dd6:	09 f4       	brne	.+2      	; 0xdda <vfprintf+0x3a0>
 dd8:	42 ce       	rjmp	.-892    	; 0xa5e <vfprintf+0x24>
 dda:	b6 01       	movw	r22, r12
 ddc:	80 e2       	ldi	r24, 0x20	; 32
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 de4:	2a 94       	dec	r2
 de6:	f6 cf       	rjmp	.-20     	; 0xdd4 <vfprintf+0x39a>
 de8:	f6 01       	movw	r30, r12
 dea:	86 81       	ldd	r24, Z+6	; 0x06
 dec:	97 81       	ldd	r25, Z+7	; 0x07
 dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x3ba>
 df0:	8f ef       	ldi	r24, 0xFF	; 255
 df2:	9f ef       	ldi	r25, 0xFF	; 255
 df4:	2b 96       	adiw	r28, 0x0b	; 11
 df6:	e2 e1       	ldi	r30, 0x12	; 18
 df8:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__epilogue_restores__>

00000dfc <strnlen_P>:
 dfc:	fc 01       	movw	r30, r24
 dfe:	05 90       	lpm	r0, Z+
 e00:	61 50       	subi	r22, 0x01	; 1
 e02:	70 40       	sbci	r23, 0x00	; 0
 e04:	01 10       	cpse	r0, r1
 e06:	d8 f7       	brcc	.-10     	; 0xdfe <strnlen_P+0x2>
 e08:	80 95       	com	r24
 e0a:	90 95       	com	r25
 e0c:	8e 0f       	add	r24, r30
 e0e:	9f 1f       	adc	r25, r31
 e10:	08 95       	ret

00000e12 <strnlen>:
 e12:	fc 01       	movw	r30, r24
 e14:	61 50       	subi	r22, 0x01	; 1
 e16:	70 40       	sbci	r23, 0x00	; 0
 e18:	01 90       	ld	r0, Z+
 e1a:	01 10       	cpse	r0, r1
 e1c:	d8 f7       	brcc	.-10     	; 0xe14 <strnlen+0x2>
 e1e:	80 95       	com	r24
 e20:	90 95       	com	r25
 e22:	8e 0f       	add	r24, r30
 e24:	9f 1f       	adc	r25, r31
 e26:	08 95       	ret

00000e28 <fputc>:
 e28:	0f 93       	push	r16
 e2a:	1f 93       	push	r17
 e2c:	cf 93       	push	r28
 e2e:	df 93       	push	r29
 e30:	fb 01       	movw	r30, r22
 e32:	23 81       	ldd	r18, Z+3	; 0x03
 e34:	21 fd       	sbrc	r18, 1
 e36:	03 c0       	rjmp	.+6      	; 0xe3e <fputc+0x16>
 e38:	8f ef       	ldi	r24, 0xFF	; 255
 e3a:	9f ef       	ldi	r25, 0xFF	; 255
 e3c:	2c c0       	rjmp	.+88     	; 0xe96 <fputc+0x6e>
 e3e:	22 ff       	sbrs	r18, 2
 e40:	16 c0       	rjmp	.+44     	; 0xe6e <fputc+0x46>
 e42:	46 81       	ldd	r20, Z+6	; 0x06
 e44:	57 81       	ldd	r21, Z+7	; 0x07
 e46:	24 81       	ldd	r18, Z+4	; 0x04
 e48:	35 81       	ldd	r19, Z+5	; 0x05
 e4a:	42 17       	cp	r20, r18
 e4c:	53 07       	cpc	r21, r19
 e4e:	44 f4       	brge	.+16     	; 0xe60 <fputc+0x38>
 e50:	a0 81       	ld	r26, Z
 e52:	b1 81       	ldd	r27, Z+1	; 0x01
 e54:	9d 01       	movw	r18, r26
 e56:	2f 5f       	subi	r18, 0xFF	; 255
 e58:	3f 4f       	sbci	r19, 0xFF	; 255
 e5a:	31 83       	std	Z+1, r19	; 0x01
 e5c:	20 83       	st	Z, r18
 e5e:	8c 93       	st	X, r24
 e60:	26 81       	ldd	r18, Z+6	; 0x06
 e62:	37 81       	ldd	r19, Z+7	; 0x07
 e64:	2f 5f       	subi	r18, 0xFF	; 255
 e66:	3f 4f       	sbci	r19, 0xFF	; 255
 e68:	37 83       	std	Z+7, r19	; 0x07
 e6a:	26 83       	std	Z+6, r18	; 0x06
 e6c:	14 c0       	rjmp	.+40     	; 0xe96 <fputc+0x6e>
 e6e:	8b 01       	movw	r16, r22
 e70:	ec 01       	movw	r28, r24
 e72:	fb 01       	movw	r30, r22
 e74:	00 84       	ldd	r0, Z+8	; 0x08
 e76:	f1 85       	ldd	r31, Z+9	; 0x09
 e78:	e0 2d       	mov	r30, r0
 e7a:	09 95       	icall
 e7c:	89 2b       	or	r24, r25
 e7e:	e1 f6       	brne	.-72     	; 0xe38 <fputc+0x10>
 e80:	d8 01       	movw	r26, r16
 e82:	16 96       	adiw	r26, 0x06	; 6
 e84:	8d 91       	ld	r24, X+
 e86:	9c 91       	ld	r25, X
 e88:	17 97       	sbiw	r26, 0x07	; 7
 e8a:	01 96       	adiw	r24, 0x01	; 1
 e8c:	17 96       	adiw	r26, 0x07	; 7
 e8e:	9c 93       	st	X, r25
 e90:	8e 93       	st	-X, r24
 e92:	16 97       	sbiw	r26, 0x06	; 6
 e94:	ce 01       	movw	r24, r28
 e96:	df 91       	pop	r29
 e98:	cf 91       	pop	r28
 e9a:	1f 91       	pop	r17
 e9c:	0f 91       	pop	r16
 e9e:	08 95       	ret

00000ea0 <__ultoa_invert>:
 ea0:	fa 01       	movw	r30, r20
 ea2:	aa 27       	eor	r26, r26
 ea4:	28 30       	cpi	r18, 0x08	; 8
 ea6:	51 f1       	breq	.+84     	; 0xefc <__ultoa_invert+0x5c>
 ea8:	20 31       	cpi	r18, 0x10	; 16
 eaa:	81 f1       	breq	.+96     	; 0xf0c <__ultoa_invert+0x6c>
 eac:	e8 94       	clt
 eae:	6f 93       	push	r22
 eb0:	6e 7f       	andi	r22, 0xFE	; 254
 eb2:	6e 5f       	subi	r22, 0xFE	; 254
 eb4:	7f 4f       	sbci	r23, 0xFF	; 255
 eb6:	8f 4f       	sbci	r24, 0xFF	; 255
 eb8:	9f 4f       	sbci	r25, 0xFF	; 255
 eba:	af 4f       	sbci	r26, 0xFF	; 255
 ebc:	b1 e0       	ldi	r27, 0x01	; 1
 ebe:	3e d0       	rcall	.+124    	; 0xf3c <__ultoa_invert+0x9c>
 ec0:	b4 e0       	ldi	r27, 0x04	; 4
 ec2:	3c d0       	rcall	.+120    	; 0xf3c <__ultoa_invert+0x9c>
 ec4:	67 0f       	add	r22, r23
 ec6:	78 1f       	adc	r23, r24
 ec8:	89 1f       	adc	r24, r25
 eca:	9a 1f       	adc	r25, r26
 ecc:	a1 1d       	adc	r26, r1
 ece:	68 0f       	add	r22, r24
 ed0:	79 1f       	adc	r23, r25
 ed2:	8a 1f       	adc	r24, r26
 ed4:	91 1d       	adc	r25, r1
 ed6:	a1 1d       	adc	r26, r1
 ed8:	6a 0f       	add	r22, r26
 eda:	71 1d       	adc	r23, r1
 edc:	81 1d       	adc	r24, r1
 ede:	91 1d       	adc	r25, r1
 ee0:	a1 1d       	adc	r26, r1
 ee2:	20 d0       	rcall	.+64     	; 0xf24 <__ultoa_invert+0x84>
 ee4:	09 f4       	brne	.+2      	; 0xee8 <__ultoa_invert+0x48>
 ee6:	68 94       	set
 ee8:	3f 91       	pop	r19
 eea:	2a e0       	ldi	r18, 0x0A	; 10
 eec:	26 9f       	mul	r18, r22
 eee:	11 24       	eor	r1, r1
 ef0:	30 19       	sub	r19, r0
 ef2:	30 5d       	subi	r19, 0xD0	; 208
 ef4:	31 93       	st	Z+, r19
 ef6:	de f6       	brtc	.-74     	; 0xeae <__ultoa_invert+0xe>
 ef8:	cf 01       	movw	r24, r30
 efa:	08 95       	ret
 efc:	46 2f       	mov	r20, r22
 efe:	47 70       	andi	r20, 0x07	; 7
 f00:	40 5d       	subi	r20, 0xD0	; 208
 f02:	41 93       	st	Z+, r20
 f04:	b3 e0       	ldi	r27, 0x03	; 3
 f06:	0f d0       	rcall	.+30     	; 0xf26 <__ultoa_invert+0x86>
 f08:	c9 f7       	brne	.-14     	; 0xefc <__ultoa_invert+0x5c>
 f0a:	f6 cf       	rjmp	.-20     	; 0xef8 <__ultoa_invert+0x58>
 f0c:	46 2f       	mov	r20, r22
 f0e:	4f 70       	andi	r20, 0x0F	; 15
 f10:	40 5d       	subi	r20, 0xD0	; 208
 f12:	4a 33       	cpi	r20, 0x3A	; 58
 f14:	18 f0       	brcs	.+6      	; 0xf1c <__ultoa_invert+0x7c>
 f16:	49 5d       	subi	r20, 0xD9	; 217
 f18:	31 fd       	sbrc	r19, 1
 f1a:	40 52       	subi	r20, 0x20	; 32
 f1c:	41 93       	st	Z+, r20
 f1e:	02 d0       	rcall	.+4      	; 0xf24 <__ultoa_invert+0x84>
 f20:	a9 f7       	brne	.-22     	; 0xf0c <__ultoa_invert+0x6c>
 f22:	ea cf       	rjmp	.-44     	; 0xef8 <__ultoa_invert+0x58>
 f24:	b4 e0       	ldi	r27, 0x04	; 4
 f26:	a6 95       	lsr	r26
 f28:	97 95       	ror	r25
 f2a:	87 95       	ror	r24
 f2c:	77 95       	ror	r23
 f2e:	67 95       	ror	r22
 f30:	ba 95       	dec	r27
 f32:	c9 f7       	brne	.-14     	; 0xf26 <__ultoa_invert+0x86>
 f34:	00 97       	sbiw	r24, 0x00	; 0
 f36:	61 05       	cpc	r22, r1
 f38:	71 05       	cpc	r23, r1
 f3a:	08 95       	ret
 f3c:	9b 01       	movw	r18, r22
 f3e:	ac 01       	movw	r20, r24
 f40:	0a 2e       	mov	r0, r26
 f42:	06 94       	lsr	r0
 f44:	57 95       	ror	r21
 f46:	47 95       	ror	r20
 f48:	37 95       	ror	r19
 f4a:	27 95       	ror	r18
 f4c:	ba 95       	dec	r27
 f4e:	c9 f7       	brne	.-14     	; 0xf42 <__ultoa_invert+0xa2>
 f50:	62 0f       	add	r22, r18
 f52:	73 1f       	adc	r23, r19
 f54:	84 1f       	adc	r24, r20
 f56:	95 1f       	adc	r25, r21
 f58:	a0 1d       	adc	r26, r0
 f5a:	08 95       	ret

00000f5c <__prologue_saves__>:
 f5c:	2f 92       	push	r2
 f5e:	3f 92       	push	r3
 f60:	4f 92       	push	r4
 f62:	5f 92       	push	r5
 f64:	6f 92       	push	r6
 f66:	7f 92       	push	r7
 f68:	8f 92       	push	r8
 f6a:	9f 92       	push	r9
 f6c:	af 92       	push	r10
 f6e:	bf 92       	push	r11
 f70:	cf 92       	push	r12
 f72:	df 92       	push	r13
 f74:	ef 92       	push	r14
 f76:	ff 92       	push	r15
 f78:	0f 93       	push	r16
 f7a:	1f 93       	push	r17
 f7c:	cf 93       	push	r28
 f7e:	df 93       	push	r29
 f80:	cd b7       	in	r28, 0x3d	; 61
 f82:	de b7       	in	r29, 0x3e	; 62
 f84:	ca 1b       	sub	r28, r26
 f86:	db 0b       	sbc	r29, r27
 f88:	0f b6       	in	r0, 0x3f	; 63
 f8a:	f8 94       	cli
 f8c:	de bf       	out	0x3e, r29	; 62
 f8e:	0f be       	out	0x3f, r0	; 63
 f90:	cd bf       	out	0x3d, r28	; 61
 f92:	09 94       	ijmp

00000f94 <__epilogue_restores__>:
 f94:	2a 88       	ldd	r2, Y+18	; 0x12
 f96:	39 88       	ldd	r3, Y+17	; 0x11
 f98:	48 88       	ldd	r4, Y+16	; 0x10
 f9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 fa0:	8c 84       	ldd	r8, Y+12	; 0x0c
 fa2:	9b 84       	ldd	r9, Y+11	; 0x0b
 fa4:	aa 84       	ldd	r10, Y+10	; 0x0a
 fa6:	b9 84       	ldd	r11, Y+9	; 0x09
 fa8:	c8 84       	ldd	r12, Y+8	; 0x08
 faa:	df 80       	ldd	r13, Y+7	; 0x07
 fac:	ee 80       	ldd	r14, Y+6	; 0x06
 fae:	fd 80       	ldd	r15, Y+5	; 0x05
 fb0:	0c 81       	ldd	r16, Y+4	; 0x04
 fb2:	1b 81       	ldd	r17, Y+3	; 0x03
 fb4:	aa 81       	ldd	r26, Y+2	; 0x02
 fb6:	b9 81       	ldd	r27, Y+1	; 0x01
 fb8:	ce 0f       	add	r28, r30
 fba:	d1 1d       	adc	r29, r1
 fbc:	0f b6       	in	r0, 0x3f	; 63
 fbe:	f8 94       	cli
 fc0:	de bf       	out	0x3e, r29	; 62
 fc2:	0f be       	out	0x3f, r0	; 63
 fc4:	cd bf       	out	0x3d, r28	; 61
 fc6:	ed 01       	movw	r28, r26
 fc8:	08 95       	ret

00000fca <_exit>:
 fca:	f8 94       	cli

00000fcc <__stop_program>:
 fcc:	ff cf       	rjmp	.-2      	; 0xfcc <__stop_program>
